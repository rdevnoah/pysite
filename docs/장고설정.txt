- postgresql 에 db 생성 및 계정 생성, 접근권한 추가
1. create database pysite;
2. create user 'pysite' with password 'pysite';
3. grant all privileges on all tables in schema public to pysite;
4. data/pg_hba.conf 로 접근설정


- pycharm(community) 에서 Django 프로젝트 시작하기

1. pycharm 프로젝트 생성(python_ch3 프로젝트)

2. Django 설치
    $ pip install django

3. 장고 프로젝트 생성
    $ django-admin startproject python_ch3

4. 디렉토리 정리
    -> pycharm 프로젝트와 Django 프로젝트의 디렉토리를 일치시키기

5. psycopg2(postgres db lib) 설치
    $ pip install psycopg2==2.7.5

6. settings.py 설정
    1) TIME_ZONE = 'Asia/Seoul'

    2) DB 설정
        DATABASES = {
            'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': 'djdb',
            'USER': 'djdb',
            'PASSWORD': 'djdb',
            'HOST': '192.168.1.39',
            'PORT': 5432
            }
        }

    3) Template 디렉토리 설정 (setting.py)
    'DIRS': [os.path.join(BASE_DIR, 'templates')],

    python_ch3
        |
        |-------/templates 생성

7. django 프로젝트의 기본 관리 어플리케이션이 사용하는 테이블을 생성
   $ python manage.py migrate

8. 장고 프로젝트의 기본 관리 어플리케이션 로그인 계정 생성하기
    (관리 계정 생성하기)
    $ python manage.py createsuperuser

9. 지금까지 작업 내용 확인하기
    $ python manage.py runserver 0.0.0.0:8888
============================================================================

Application 작업
1) main 추가
    1. 어플리케이션 추가
        $ python manage.py startapp main

    2. 어플리케이션 등록 (settings.py에 application 추가)
        INSTALLED_APPS = [
            'main',
        ]

        urls.py에 만들어진 app폴더의 views.py 안에 정의된 함수를 url 패턴과 함께 추가한다.

    3. template
            |----main 만들기
        어플리케이션 template 디렉토리 생성

    4. Model 정의(생략)

    5. urls.py에서 url-view의 handler mapping

    6. views.py에서 핸들러 함수 구현(요청처리, 모델작업, 응답처리)

    7. 화면이 필요한 경우, 해당 template 작업

2) emaillist
    1. 어플리케이션 추가
        $ python manage.py startapp emaillist

    2. 어플리케이션 등록 (settings.py에 application 추가)
        INSTALLED_APPS = [
            'emaillist',
        ]

        urls.py에 만들어진 app폴더의 views.py 안에 정의된 함수를 url 패턴과 함께 추가한다.

    3. template
            |----emaillist 만들기
        어플리케이션 template 디렉토리 생성

    4-1. Model 정의 : models.py

    4-2. admin.py에
        admin.site.register(Emaillist)

    4-3. migration 이름의 DDL python 모듈을 생성
        $ python manage.py makemigrations

    4-4. 물리DB와 스키마 동기화 작업을 한다.
        $ python manage.py migrate

    5. urls.py에서 url-view의 handler mapping

    6. views.py에서 핸들러 함수 구현(요청처리, 모델작업, 응답처리)

    7. 화면이 필요한 경우, 해당 template 작업


# 정적 파일 설정
settings.py 안의 맨 아래, STATICS 부분 확인하자.